{"version":3,"sources":["movie-imgs/spiritedAway.jpg","movie-imgs/colorful.jpg","movie-imgs/beastAndBoy.jpg","movie-imgs/kimiNoNawa.jpg","search-filter.js","movie-card.js","cardinfo.js","rating-filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","value","onChange","className","type","event","target","MovieCard","cards","this","props","Row","Card","style","width","rating","starColor","src","img","alt","height","title","releaseDate","Component","Cardinfo","x","onAddMovie","map","el","key","id","onClick","Math","random","prompt","Number","RatingF","state","require","App","minRatingFilter","titleFilter","newMovie","setState","push","newTitleFilter","Container","filter","toLowerCase","includes","toLocaleLowerCase","addNewMovie","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c531a013.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiritedAway.d53f8739.jpg\";","module.exports = __webpack_public_path__ + \"static/media/colorful.ad8f9e85.jpg\";","module.exports = __webpack_public_path__ + \"static/media/beastAndBoy.2af3b489.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kimiNoNawa.c9f67949.jpg\";","import React, { Component } from 'react';\r\nimport {InputGroup,FormControl, Button} from 'react-bootstrap';\r\nimport SearchField from \"react-search-field\";\r\nimport './App.css'\r\n\r\n\r\n\r\nconst Search = ({value = '', onChange = () => {}}) => (\r\n   <div className=\"name-filter\">\r\n       <input\r\n           className=\"name-filter-text\"\r\n           type=\"text\"\r\n           value={value}\r\n           onChange={(event) => {\r\n               onChange(event.target.value)\r\n           }} />\r\n     </div>\r\n)\r\n \r\nexport default  Search ;   \r\n// class Search extends Component {\r\n    \r\n//    state = {\r\n  \r\n//   }\r\n\r\n//     render() { \r\n//       const {x}=this.props\r\n//         return ( \r\n//            <div >\r\n//             <InputGroup className=\"mb-3\">\r\n//                <FormControl \r\n//                className=\"search-bar\" \r\n//                value={x}\r\n//                onChange={(event) => {\r\n//                   onChange(event.target.value)}}/>\r\n            \r\n//                <InputGroup.Append>\r\n//                   <Button variant=\"outline-warning\">Search</Button>\r\n//                </InputGroup.Append>\r\n//             </InputGroup>\r\n          \r\n//            </div> \r\n//          );\r\n//     }\r\n// }\r\n \r\n// export default Search;","import React, { Component } from 'react';\r\nimport {Card, Row} from 'react-bootstrap';\r\nimport StarRatingComponent from 'react-star-rating-component';\r\n\r\nimport './App.css'\r\n\r\n\r\n\r\nclass MovieCard extends Component {\r\n    render() { \r\n      const {cards}=this.props\r\n        return ( \r\n        <div>\r\n          <Row>\r\n           \r\n          <Card className=\"card\" style={{ width: '19rem' }}>\r\n              <div className=\"movie-rating\"><StarRatingComponent value={cards.rating}  starColor={'\trgb(245,245,245)'}/></div>\r\n            {/* <div className=\"movie-img\"> */}\r\n                <img  src={cards.img} alt=\"poster\" width=\"300rem\" height=\"300px\"/>\r\n            {/* </div> */}\r\n            <div className=\"movie-title\"> {cards.title} - {cards.releaseDate} </div>\r\n             \r\n          </Card>\r\n        </Row>\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default MovieCard;","import React, { Component } from 'react';\r\nimport MovieCard from './movie-card'\r\nimport {Card} from 'react-bootstrap';\r\n\r\n// class Cardinfo extends Component {\r\n    \r\n//     render() { \r\n//         const{x}=this.props\r\n//         return ( \r\n//         <div>\r\n//          <div className=\"infocard\">\r\n//            {  x.map((el)=> <MovieCard  key={el.id} cards={el}/>)}\r\n//              <Card style={{ width: '19rem' }} > <img  className=\"plusbutton\" src=\"https://www.iconsdb.com/icons/preview/black/plus-5-xxl.png\" width=\"250px\"/>  </Card>\r\n//          </div>\r\n//         </div>\r\n//          );\r\n//     }\r\n// }\r\n \r\n// export default Cardinfo;\r\nconst Cardinfo = ({x = [], onAddMovie = () => {}}) => {\r\n  return ( <div className=\"infocard\">\r\n          {  x.map((el)=> <MovieCard  key={el.id} cards={el}/>)} \r\n          <Card  style={{ width: '19rem' }}\r\n            className=\"new-movie-card\"\r\n            onClick={() => {\r\n                onAddMovie({\r\n                    id: Math.random(),\r\n                    title: prompt('movie title: '),\r\n                    rating: Number(prompt('movie rating: ')),\r\n                    releaseDate: Number(prompt('movie year: ')),\r\n                    img : prompt('movie img: ')\r\n                })\r\n            }} >\r\n           <img  className=\"plusbutton\" src=\"https://www.iconsdb.com/icons/preview/black/plus-5-xxl.png\" width=\"250px\"/>\r\n        </Card>\r\n        </div>\r\n        \r\n  );\r\n}\r\n\r\n \r\nexport default Cardinfo;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport StarRatingComponent from 'react-star-rating-component';\r\n\r\n\r\nclass RatingF extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n        <div className=\"mini-rating\">\r\n           <span className=\"rating-text\"> Minimum rating  </span>\r\n           <StarRatingComponent value={3}  starColor={'\trgb(245,245,245)'}/>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n \r\nexport default RatingF;","import React, { Component } from 'react';\nimport Search from './search-filter';\nimport Cardinfo from './cardinfo';\nimport RatingF from './rating-filter';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\n\nconst cards =[ \n{   id:\"1\",\n    title:\"Spirited Away\",\n    releaseDate:\"2001\",\n    rating:\"5\",\n    img:require('../src/movie-imgs/spiritedAway.jpg')\n},\n{   id:\"2\",\n    title:\"Colorful\",\n    releaseDate:\"2013\",\n    rating:\"3\",\n    img:require('../src/movie-imgs/colorful.jpg')\n},\n{   id:\"3\",\n    title:\"The Beast and The Boy\",\n    releaseDate:\"2015\",\n    rating:\"5\",\n    img:require('../src/movie-imgs/beastAndBoy.jpg')\n},\n{   id:\"4\",\n    title:\"Kimi No Na Wa\",\n    releaseDate:\"2016\",\n    rating:\"4\",\n    img:require('../src/movie-imgs/kimiNoNawa.jpg')\n}\n\n]\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      minRatingFilter: 3,\n      titleFilter : '',\n      x:cards\n    }\n}\naddNewMovie(newMovie) {\n  this.setState({\n    x: this.state.x.push(newMovie)\n  })\n}\n\n  render() { \n    return ( <div className=\"App\">\n        <Search   value={this.state.titleFilter}\n            onChange={(newTitleFilter) => {\n              this.setState({\n                titleFilter: newTitleFilter\n              })\n            }}  />\n         <RatingF/>\n         <Container>\n            <Cardinfo \n             x={cards.filter(el => \n              el.rating >= this.state.minRatingFilter &&\n              el.title.toLowerCase().includes (this.state.titleFilter.toLocaleLowerCase())\n               )}\n               onAddMovie={(newMovie) => this.addNewMovie(newMovie)}\n             />\n          </Container>\n         </div> );\n  }\n}\n \nexport default App ;\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//     <Search/>\n//     <RatingF/>\n//     <Container>\n//        <Cardinfo  x={cards}/>\n//      </Container>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}